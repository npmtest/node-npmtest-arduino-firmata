{"/home/travis/build/npmtest/node-npmtest-arduino-firmata/test.js":"/* istanbul instrument in package npmtest_arduino_firmata */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-arduino-firmata/lib.npmtest_arduino_firmata.js":"/* istanbul instrument in package npmtest_arduino_firmata */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_arduino_firmata = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_arduino_firmata = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-arduino-firmata/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-arduino-firmata && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_arduino_firmata */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_arduino_firmata\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_arduino_firmata.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_arduino_firmata.rollup.js'] =\n            local.assetsDict['/assets.npmtest_arduino_firmata.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_arduino_firmata.__dirname + '/lib.npmtest_arduino_firmata.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-arduino-firmata/node_modules/arduino-firmata/lib/arduino-firmata.js":"(function() {\n  'use strict';\n  var ArduinoFirmata, SerialPort, debug, events, exports, serialport,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  events = require('eventemitter2');\n\n  SerialPort = (serialport = require('serialport')).SerialPort;\n\n  debug = require('debug')('arduino-firmata');\n\n  exports = module.exports = ArduinoFirmata = (function(superClass) {\n    extend(ArduinoFirmata, superClass);\n\n    ArduinoFirmata.Status = {\n      CLOSE: 0,\n      OPEN: 1\n    };\n\n    ArduinoFirmata.INPUT = 0;\n\n    ArduinoFirmata.OUTPUT = 1;\n\n    ArduinoFirmata.ANALOG = 2;\n\n    ArduinoFirmata.PWM = 3;\n\n    ArduinoFirmata.SERVO = 4;\n\n    ArduinoFirmata.SHIFT = 5;\n\n    ArduinoFirmata.I2C = 6;\n\n    ArduinoFirmata.LOW = 0;\n\n    ArduinoFirmata.HIGH = 1;\n\n    ArduinoFirmata.MAX_DATA_BYTES = 32;\n\n    ArduinoFirmata.DIGITAL_MESSAGE = 0x90;\n\n    ArduinoFirmata.ANALOG_MESSAGE = 0xE0;\n\n    ArduinoFirmata.REPORT_ANALOG = 0xC0;\n\n    ArduinoFirmata.REPORT_DIGITAL = 0xD0;\n\n    ArduinoFirmata.SET_PIN_MODE = 0xF4;\n\n    ArduinoFirmata.REPORT_VERSION = 0xF9;\n\n    ArduinoFirmata.SYSTEM_RESET = 0xFF;\n\n    ArduinoFirmata.START_SYSEX = 0xF0;\n\n    ArduinoFirmata.END_SYSEX = 0xF7;\n\n    ArduinoFirmata.list = function(callback) {\n      return serialport.list(function(err, ports) {\n        var devices, j, len, port;\n        if (err) {\n          return callback(err);\n        }\n        devices = [];\n        for (j = 0, len = ports.length; j < len; j++) {\n          port = ports[j];\n          if (/usb|acm|com|ama\\d+/i.test(port.comName)) {\n            devices.push(port.comName);\n          }\n        }\n        return callback(null, devices);\n      });\n    };\n\n    function ArduinoFirmata() {\n      this.status = ArduinoFirmata.Status.CLOSE;\n      this.wait_for_data = 0;\n      this.execute_multi_byte_command = 0;\n      this.multi_byte_channel = 0;\n      this.stored_input_data = [];\n      this.parsing_sysex = false;\n      this.sysex_bytes_read = 0;\n      this.digital_output_data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      this.digital_input_data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      this.analog_input_data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      this.boardVersion = null;\n    }\n\n    ArduinoFirmata.prototype.isOldArduinoDevice = function() {\n      return /usbserial|USB/.test(this.serialport_name);\n    };\n\n    ArduinoFirmata.prototype.connect = function(serialport_name, opts) {\n      this.serialport_name = serialport_name;\n      if (opts == null) {\n        opts = {\n          baudrate: 57600\n        };\n      }\n      opts.parser = serialport.parsers.raw;\n      if (!this.serialport_name) {\n        ArduinoFirmata.list((function(_this) {\n          return function(err, devices) {\n            return _this.connect(devices[0], opts);\n          };\n        })(this));\n        return this;\n      }\n      this.once('boardReady', function() {\n        var io_init_wait;\n        debug('boardReady');\n        io_init_wait = this.isOldArduinoDevice() ? (debug(\"old arduino device found \" + this.serialport_name), 3000) : (debug(\"new arduino device found \" + this.serialport_name), 100);\n        debug(\"wait \" + io_init_wait + \"(msec)\");\n        return setTimeout((function(_this) {\n          return function() {\n            var i, j, k;\n            for (i = j = 0; j < 6; i = ++j) {\n              _this.write([ArduinoFirmata.REPORT_ANALOG | i, 1]);\n            }\n            for (i = k = 0; k < 2; i = ++k) {\n              _this.write([ArduinoFirmata.REPORT_DIGITAL | i, 1]);\n            }\n            debug('init IO ports');\n            return _this.emit('connect');\n          };\n        })(this), io_init_wait);\n      });\n      this.serialport = new SerialPort(this.serialport_name, opts);\n      this.serialport.once('open', (function(_this) {\n        return function() {\n          var cid;\n          cid = setInterval(function() {\n            debug('request REPORT_VERSION');\n            return _this.write([ArduinoFirmata.REPORT_VERSION]);\n          }, 500);\n          _this.once('boardVersion', function(version) {\n            clearInterval(cid);\n            _this.status = ArduinoFirmata.Status.OPEN;\n            return _this.emit('boardReady');\n          });\n          return _this.serialport.on('data', function(data) {\n            var byte, j, len, results;\n            results = [];\n            for (j = 0, len = data.length; j < len; j++) {\n              byte = data[j];\n              results.push(_this.process_input(byte));\n            }\n            return results;\n          });\n        };\n      })(this));\n      return this;\n    };\n\n    ArduinoFirmata.prototype.isOpen = function() {\n      return this.status === ArduinoFirmata.Status.OPEN;\n    };\n\n    ArduinoFirmata.prototype.close = function(callback) {\n      this.status = ArduinoFirmata.Status.CLOSE;\n      return this.serialport.close(callback);\n    };\n\n    ArduinoFirmata.prototype.reset = function(callback) {\n      return this.write([ArduinoFirmata.SYSTEM_RESET], callback);\n    };\n\n    ArduinoFirmata.prototype.write = function(bytes, callback) {\n      return this.serialport.write(bytes, callback);\n    };\n\n    ArduinoFirmata.prototype.sysex = function(command, data, callback) {\n      var write_data;\n      if (data == null) {\n        data = [];\n      }\n      data = data.map(function(i) {\n        return i & 0x7f;\n      });\n      write_data = [ArduinoFirmata.START_SYSEX, command].concat(data, [ArduinoFirmata.END_SYSEX]);\n      return this.write(write_data, callback);\n    };\n\n    ArduinoFirmata.prototype.pinMode = function(pin, mode, callback) {\n      switch (mode) {\n        case true:\n          mode = ArduinoFirmata.OUTPUT;\n          break;\n        case false:\n          mode = ArduinoFirmata.INPUT;\n      }\n      return this.write([ArduinoFirmata.SET_PIN_MODE, pin, mode], callback);\n    };\n\n    ArduinoFirmata.prototype.digitalWrite = function(pin, value, callback) {\n      var port_num;\n      this.pinMode(pin, ArduinoFirmata.OUTPUT);\n      port_num = (pin >>> 3) & 0x0F;\n      if (value === 0 || value === false) {\n        this.digital_output_data[port_num] &= ~(1 << (pin & 0x07));\n      } else {\n        this.digital_output_data[port_num] |= 1 << (pin & 0x07);\n      }\n      return this.write([ArduinoFirmata.DIGITAL_MESSAGE | port_num, this.digital_output_data[port_num] & 0x7F, this.digital_output_data[port_num] >>> 7], callback);\n    };\n\n    ArduinoFirmata.prototype.analogWrite = function(pin, value, callback) {\n      value = Math.floor(value);\n      this.pinMode(pin, ArduinoFirmata.PWM);\n      return this.write([ArduinoFirmata.ANALOG_MESSAGE | (pin & 0x0F), value & 0x7F, value >>> 7], callback);\n    };\n\n    ArduinoFirmata.prototype.servoWrite = function(pin, angle, callback) {\n      this.pinMode(pin, ArduinoFirmata.SERVO);\n      return this.write([ArduinoFirmata.ANALOG_MESSAGE | (pin & 0x0F), angle & 0x7F, angle >>> 7], callback);\n    };\n\n    ArduinoFirmata.prototype.digitalRead = function(pin) {\n      return ((this.digital_input_data[pin >>> 3] >>> (pin & 0x07)) & 0x01) > 0;\n    };\n\n    ArduinoFirmata.prototype.analogRead = function(pin) {\n      return this.analog_input_data[pin];\n    };\n\n    ArduinoFirmata.prototype.process_input = function(input_data) {\n      var analog_value, command, diff, i, j, old_analog_value, results, stat, sysex_command, sysex_data;\n      if (this.parsing_sysex) {\n        if (input_data === ArduinoFirmata.END_SYSEX) {\n          this.parsing_sysex = false;\n          sysex_command = this.stored_input_data[0];\n          sysex_data = this.stored_input_data.slice(1, this.sysex_bytes_read);\n          return this.emit('sysex', {\n            command: sysex_command,\n            data: sysex_data\n          });\n        } else {\n          this.stored_input_data[this.sysex_bytes_read] = input_data;\n          return this.sysex_bytes_read += 1;\n        }\n      } else if (this.wait_for_data > 0 && input_data < 128) {\n        this.wait_for_data -= 1;\n        this.stored_input_data[this.wait_for_data] = input_data;\n        if (this.execute_multi_byte_command !== 0 && this.wait_for_data === 0) {\n          switch (this.execute_multi_byte_command) {\n            case ArduinoFirmata.DIGITAL_MESSAGE:\n              input_data = (this.stored_input_data[0] << 7) + this.stored_input_data[1];\n              diff = this.digital_input_data[this.multi_byte_channel] ^ input_data;\n              this.digital_input_data[this.multi_byte_channel] = input_data;\n              if (this.listeners('digitalChange').length > 0) {\n                results = [];\n                for (i = j = 0; j <= 13; i = ++j) {\n                  if (((0x01 << i) & diff) > 0) {\n                    stat = (input_data & diff) > 0;\n                    results.push(this.emit('digitalChange', {\n                      pin: i + this.multi_byte_channel * 8,\n                      value: stat,\n                      old_value: !stat\n                    }));\n                  } else {\n                    results.push(void 0);\n                  }\n                }\n                return results;\n              }\n              break;\n            case ArduinoFirmata.ANALOG_MESSAGE:\n              analog_value = (this.stored_input_data[0] << 7) + this.stored_input_data[1];\n              old_analog_value = this.analogRead(this.multi_byte_channel);\n              this.analog_input_data[this.multi_byte_channel] = analog_value;\n              if (old_analog_value !== analog_value) {\n                return this.emit('analogChange', {\n                  pin: this.multi_byte_channel,\n                  value: analog_value,\n                  old_value: old_analog_value\n                });\n              }\n              break;\n            case ArduinoFirmata.REPORT_VERSION:\n              this.boardVersion = this.stored_input_data[1] + \".\" + this.stored_input_data[0];\n              return this.emit('boardVersion', this.boardVersion);\n          }\n        }\n      } else {\n        if (input_data < 0xF0) {\n          command = input_data & 0xF0;\n          this.multi_byte_channel = input_data & 0x0F;\n        } else {\n          command = input_data;\n        }\n        if (command === ArduinoFirmata.START_SYSEX) {\n          this.parsing_sysex = true;\n          return this.sysex_bytes_read = 0;\n        } else if (command === ArduinoFirmata.DIGITAL_MESSAGE || command === ArduinoFirmata.ANALOG_MESSAGE || command === ArduinoFirmata.REPORT_VERSION) {\n          this.wait_for_data = 2;\n          return this.execute_multi_byte_command = command;\n        }\n      }\n    };\n\n    return ArduinoFirmata;\n\n  })(events.EventEmitter2);\n\n}).call(this);\n"}